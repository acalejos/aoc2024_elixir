<!-- livebook:{"persist_outputs":true} -->

# Day 5

```elixir
Mix.install(
  [
    {:benchee, "~> 1.3"}
  ]
)
```

## Setup

```elixir
input =
  System.fetch_env!("LB_AOC_DIR")
  |> Path.join("data/day5.txt")
  |> File.read!()

nil
```

<!-- livebook:{"output":true} -->

```
nil
```

## Solve

```elixir
defmodule Day5 do
  defp parse(input) do
    [instructions, pages] = String.split(input, "\n\n")

    instructions =
      for instruction <- String.split(instructions, "\n") do
        for i <- String.split(instruction, "|") do
          String.to_integer(i)
        end
      end
      |> MapSet.new()

    pages =
      for page <- String.split(pages, "\n"), page != "" do
        for number <- String.split(page, ",") do
          String.to_integer(number)
        end
      end

    {instructions, pages}
  end

  def is_ordered?(line, instructions) do
    Enum.reduce_while(line, MapSet.new(), fn
      current, seen ->
        cant_be_before =
          MapSet.filter(instructions, fn
            [^current, _other] -> true
            _other -> false
          end)

        if Enum.any?(cant_be_before, fn [^current, c] -> MapSet.member?(seen, c) end) do
          {:halt, false}
        else
          {:cont, MapSet.put(seen, current)}
        end
    end)
  end

  @doc ~S"""
  iex> Day5.part1("47|53\n97|13\n97|61\n97|47\n75|29\n61|13\n75|53\n29|13\n97|29\n53|29\n61|53\n97|53\n61|29\n47|13\n75|47\n97|75\n47|61\n75|61\n47|29\n75|13\n53|13\n\n75,47,61,53,29\n97,61,53,29,13\n75,29,13\n75,97,47,61,53\n61,13,29\n97,13,75,29,47\n")
  143
  """
  def part1(input) do
    {instructions, pages} = parse(input)

    for page <- pages, reduce: 0 do
      sum ->
        if is_ordered?(page, instructions) do
          middle = floor(length(page) / 2)
          sum + Enum.at(page, middle)
        else
          sum
        end
    end
  end

  @doc ~S"""
  iex> Day5.part2("47|53\n97|13\n97|61\n97|47\n75|29\n61|13\n75|53\n29|13\n97|29\n53|29\n61|53\n97|53\n61|29\n47|13\n75|47\n97|75\n47|61\n75|61\n47|29\n75|13\n53|13\n\n75,47,61,53,29\n97,61,53,29,13\n75,29,13\n75,97,47,61,53\n61,13,29\n97,13,75,29,47\n")
  123
  """
  def part2(input) do
    {instructions, pages} = parse(input)

    for page <- pages, reduce: 0 do
      sum ->
        if is_ordered?(page, instructions) do
          sum
        else
          reordered = Enum.sort(page, &MapSet.member?(instructions, [&1, &2]))
          middle = floor(length(reordered) / 2)
          sum + Enum.at(reordered, middle)
        end
    end
  end

  def bench(input) do
    Benchee.run(
      %{
        "part1" => fn -> part1(input) end,
        "part2" => fn -> part2(input) end
      },
      time: 10,
      memory_time: 2
    )
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day5, <<70, 79, 82, 49, 0, 0, 22, ...>>, {:bench, 1}}
```

```elixir
Day5.bench(input)
```

<!-- livebook:{"output":true} -->

```
Error trying to determine erlang version enoent, falling back to overall OTP version
Operating System: macOS
CPU Information: Apple M1 Max
Number of Available Cores: 10
Available memory: 32 GB
Elixir 1.17.2
Erlang 27
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 10 s
memory time: 2 s
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 28 s

Benchmarking part1 ...
Benchmarking part2 ...
Calculating statistics...
Formatting results...

Name            ips        average  deviation         median         99th %
part1         36.68       27.26 ms     ±3.08%       27.02 ms       32.38 ms
part2         35.03       28.55 ms    ±20.22%       26.99 ms       55.27 ms

Comparison: 
part1         36.68
part2         35.03 - 1.05x slower +1.29 ms

Memory usage statistics:

Name          average  deviation         median         99th %
part1        44.22 MB     ±0.00%       44.22 MB       44.22 MB
part2        44.60 MB     ±0.00%       44.60 MB       44.60 MB

Comparison: 
part1        44.22 MB
part2        44.60 MB - 1.01x memory usage +0.38 MB
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %Benchee.System{
    elixir: "1.17.2",
    erlang: "27",
    jit_enabled?: true,
    num_cores: 10,
    os: :macOS,
    available_memory: "32 GB",
    cpu_speed: "Apple M1 Max"
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 10000000000.0,
    warmup: 2000000000.0,
    memory_time: 2000000000.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: ~c"2c",
    print: %{configuration: true, benchmarking: true, fast_warning: true},
    inputs: nil,
    input_names: [],
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "part1",
      job_name: "part1",
      function: #Function<0.80319387/0 in Day5.bench/1>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 27262136.76839237,
          ips: 36.680910542544,
          std_dev: 838688.9430910996,
          std_dev_ratio: 0.0307638740945454,
          std_dev_ips: 1.1284469136041064,
          median: 27019809.0,
          percentiles: %{50 => 27019809.0, 99 => 32383583.799999997},
          mode: 26958476,
          minimum: 26728060,
          maximum: 35242331,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 367
        },
        samples: [31920464, 32601296, 27625682, 27433684, 28059514, 28151057, 33624959, 28138265,
         27835766, 27475391, 27449433, 27035975, 27138226, 30168551, 27202975, 27085809, 27783183,
         27074977, 26981309, 26850976, 26958476, 26922934, 26973269, 27065184, 26879518, 26932518,
         26904226, 27042892, 27473808, 27411559, 27994514, 27784558, 27989724, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 46369179.93442623,
          ips: nil,
          std_dev: 13.27638109885247,
          std_dev_ratio: 2.8631908344351767e-7,
          std_dev_ips: nil,
          median: 46369176.0,
          percentiles: %{50 => 46369176.0, 99 => 46369224.0},
          mode: 46369176,
          minimum: 46369176,
          maximum: 46369224,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 61
        },
        samples: [46369176, 46369176, 46369176, 46369176, 46369176, 46369176, 46369176, 46369176,
         46369176, 46369224, 46369176, 46369176, 46369176, 46369176, 46369176, 46369176, 46369176,
         46369176, 46369176, 46369176, 46369176, 46369176, 46369176, 46369176, 46369176, 46369176,
         46369176, 46369176, 46369176, 46369176, 46369176, 46369176, ...]
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "part2",
      job_name: "part2",
      function: #Function<1.80319387/0 in Day5.bench/1>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 28548486.62962963,
          ips: 35.028126463352685,
          std_dev: 5773307.659911791,
          std_dev_ratio: 0.20222815082323298,
          std_dev_ips: 7.083673241486165,
          median: 26989310.0,
          percentiles: %{50 => 26989310.0, 99 => 55270669.160000004},
          mode: nil,
          minimum: 26614560,
          maximum: 55584947,
          relative_more: 1.047184484186458,
          relative_less: 0.954941574384465,
          absolute_difference: 1286349.8612372614,
          sample_size: 351
        },
        samples: [31328674, 31362007, 31212341, 32216546, 32143381, 31708590, 26972767, 26920018,
         26841101, 26710644, 26813144, 26852059, 26907685, 26927684, 26860352, 26818393, 26812393,
         26951643, 28439097, 27560600, 27390934, 27174641, 26914435, 26869809, 26921310, 26935351,
         26726435, 26989310, 26791143, 26807851, 26766893, 26883892, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 46769242.44067796,
          ips: nil,
          std_dev: 10.63545013304267,
          std_dev_ratio: 2.2740265991121536e-7,
          std_dev_ips: nil,
          median: 46769240.0,
          percentiles: %{50 => 46769240.0, 99 => 46769288.0},
          mode: 46769240,
          minimum: 46769240,
          maximum: 46769288,
          relative_more: 1.0086277675563269,
          relative_less: 0.9914460340733727,
          absolute_difference: 400062.50625173,
          sample_size: 59
        },
        samples: [46769240, 46769288, 46769240, 46769288, 46769240, 46769240, 46769240, 46769240,
         46769240, 46769240, 46769240, 46769240, 46769240, 46769240, 46769240, 46769240, 46769240,
         46769240, 46769240, 46769240, 46769240, 46769240, 46769240, 46769240, 46769240, 46769240,
         46769240, 46769240, 46769240, 46769240, 46769240, ...]
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```

<!-- livebook:{"offset":10489,"stamp":{"token":"XCP.JJj1d2L1cqRJ1sc-qO0_M_GC_8EdNFJqVhqYsmQeWoDA4wCrftcLjx7EG1mpkvhdjXYM8371Znpfl0hid6IOgEPnjHc5OZUDDCKrkLJzbeRgJkq9ZNfQdeWv2Zg5LILkUKE","version":2}} -->
